name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Permet l'annulation des dÃ©ploiements concurrents
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Vue Library
        run: npm run build:lib
        
      - name: Build Documentation
        run: npm run build:docs

      - name: Build Storybook
        run: npm run build-storybook

      - name: Combine builds
        run: |
          mkdir -p dist-combined
          cp -r docs/.vitepress/dist/* dist-combined/
          mkdir -p dist-combined/storybook
          cp -r package/storybook-static/* dist-combined/storybook/

      - name: Setup Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4

      - name: Upload Pages Artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist-combined'

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Comment PR with preview
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸ“š Preview')
            );

            const commentBody = `## ðŸ“š Preview

            âœ… Build completed successfully for this PR!

            ### ðŸ”— Preview Links
            - **Documentation**: Available after merge to main branch
            - **Storybook**: Available after merge to main branch

            ### ðŸ“Š Build Info
            - **Commit**: ${context.sha.substring(0, 7)}
            - **Branch**: ${context.ref.replace('refs/heads/', '')}
            - **Workflow**: [View details](${context.payload.repository.html_url}/actions/runs/${context.runId})

            > This preview will be updated automatically when you push new commits to this PR.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }